<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RhaPHP代码审计</title>
    <link href="/posts/1.html"/>
    <url>/posts/1.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>RhaPHP微信平台管理系统基于thinkphp开发，支持多公众号管理，小程序开发，APP接口开发，平台独立且快速简洁易用。灵活的扩展应用机制，具有容易上手，几乎融合微信接口，简单的调用对二次开发与开发扩展应用模块大大提高开发效率，降低企业商家运营成本。扩展应用模块化，机制灵活，代码简单并快速上手。</p><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><p>一、未授权访问漏洞（部分版本）</p><p>二、SSRF（全版本）</p><p>三、配置不当导致getshell（全版本）</p><p>四、ueditor存储型XSS（全版本）</p><h2 id="环境下载"><a href="#环境下载" class="headerlink" title="环境下载"></a>环境下载</h2><p>SSRF和存储型XSS漏洞因为全部版本都存在，所以源码的话就选择存在未授权访问漏洞的版本</p><p>源码下载地址：<code>https://gitee.com/ye-star/rhaphp/tree/b2bd0f1491c41ea02642e82d216af5ae9295826e/</code></p><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><h3 id="一、未授权访问漏洞"><a href="#一、未授权访问漏洞" class="headerlink" title="一、未授权访问漏洞"></a>一、未授权访问漏洞</h3><p>进入首页，先按照正常流程走一遍，输入用户名密码和验证码，然后点击登录</p><p><img src="/./asserts/1/image-20230110203958739.png" alt="image-20230110203958739"></p><p>我们可以看见url的路径是<code>/mp/mp/index.html</code>，然后我们根据路径找到对应的控制器</p><p><img src="/./asserts/1/image-20230110204918962.png" alt="image-20230110204918962"></p><p><img src="/./asserts/1/image-20230110205208103.png" alt="image-20230110205208103"></p><p>发现这个Index类继承了Base这个类，按Ctrl+左键跟进这个类，我们发现这个类主要是实现判断当前访问网页的是不是管理员，如果是管理员的话就正常返回页面，如果不是管理员的话就跳转登录页面</p><p><img src="/./asserts/1/image-20230110212208242.png" alt="image-20230110212208242"></p><p>根据源码，主要是看这几行来判断是不是管理员，主要获取管理员信息是第32行，然后我们跟进getAdmin()函数</p><p><img src="/./asserts/1/image-20230110212238830.png" alt="image-20230110212238830"></p><p>这几行大概的意思是，session或者cookie里面如果不是空的话，就把$arr1和$arr2这2个数组合并起来然后返回，也就是说判断管理员只要有session或者cookie其中一个就能判断，所以我们只要在本地搭一个环境，然后把登录成功返回的cookie复制一下，然后粘贴到目标站里面，就可以完成登录</p><p><img src="/./asserts/1/image-20230110212729283.png" alt="image-20230110212729283"></p><p>POC：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">Cookie: think_admin<span class="hljs-operator">=</span>think<span class="hljs-variable">%3</span>a<span class="hljs-variable">%7</span>b<span class="hljs-variable">%22</span>id<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%222</span><span class="hljs-variable">%22</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%22</span>admin_name<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%22</span>admin<span class="hljs-variable">%22</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%22</span>password<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%22</span><span class="hljs-variable">%22</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%22</span>status<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%221</span><span class="hljs-variable">%22</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%22</span>ip<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%22</span><span class="hljs-variable">%253</span>A<span class="hljs-variable">%253</span>A<span class="hljs-number">1</span><span class="hljs-variable">%22</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%22</span>last_time<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%221673354076</span><span class="hljs-variable">%22</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%22</span>rand_str<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%22</span>AkOBwT<span class="hljs-variable">%22</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%22</span>admin_id<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%221</span><span class="hljs-variable">%22</span><span class="hljs-variable">%7</span>d<span class="hljs-comment">; </span><br></code></pre></td></tr></table></figure><p><img src="/./asserts/1/image-20230110220340116.png" alt="image-20230110220340116"></p><p>把上面本地搭的环境里的think_admin粘贴到目标站里面，发现就能成功访问，不过值得注意是他判断是不是管理员是根据Cookie里的id的值来判断的，默认管理员的id是1，也有部分网站禁用了id为1的用户，到时候可以尝试修改为2或者3</p><p><img src="/./asserts/1/image-20230110220602566.png" alt="image-20230110220602566"></p><p><img src="/./asserts/1/image-20230110221213292.png" alt="image-20230110221213292"></p><h3 id="二、SSRF"><a href="#二、SSRF" class="headerlink" title="二、SSRF"></a>二、SSRF</h3><p>直接定位到mp控制器里的<code>addKeyword</code>函数，然后找到第347行</p><p><img src="/./asserts/1/image-20230110222039210.png" alt="image-20230110222039210"></p><p>然后在跟进<code>dowloadImage</code>函数，发现是调用了curl，并且没有对$url进行过滤导致可以SSRF</p><p><img src="/./asserts/1/image-20230110222106974.png" alt="image-20230110222106974"></p><p>然后在构造相关参数，dnslog成功，但是注意的是，必须要登录进去之后才能利用</p><p><img src="/./asserts/1/image-20230110223327867.png" alt="image-20230110223327867"></p><p><img src="/./asserts/1/image-20230110223336595.png" alt="image-20230110223336595"></p><h3 id="三、配置不当导致getshell"><a href="#三、配置不当导致getshell" class="headerlink" title="三、配置不当导致getshell"></a>三、配置不当导致getshell</h3><p>漏洞触发跟SSRF是一样的</p><p>第一步先开启http服务，然后在创建phpinfo.php</p><p><img src="/./asserts/1/image-20230110224318367.png" alt="image-20230110224318367"></p><p>然后把reply_image改成存放phpinfo.php文件的网站，然后发包</p><p><img src="/./asserts/1/image-20230110224457785.png" alt="image-20230110224457785"></p><p>成功下载文件，因为下载的文件名是随机的，我们也不知道文件名叫啥，所以需要目标站开启目录索引，才能getshell</p><p><img src="/./asserts/1/image-20230110224715092.png" alt="image-20230110224715092"></p><p><img src="/./asserts/1/image-20230110224846869.png" alt="image-20230110224846869"></p><p><img src="/./asserts/1/image-20230110225000740.png" alt="image-20230110225000740"></p><p><img src="/./asserts/1/image-20230110225010916.png" alt="image-20230110225010916"></p><h3 id="四、ueditor存储型XSS"><a href="#四、ueditor存储型XSS" class="headerlink" title="四、ueditor存储型XSS"></a>四、ueditor存储型XSS</h3><p><img src="/./asserts/1/image-20230110225202824.png" alt="image-20230110225202824"></p><p><img src="/./asserts/1/image-20230110225810338.png" alt="image-20230110225810338"></p>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java代码审计</title>
    <link href="/posts/52097.html"/>
    <url>/posts/52097.html</url>
    
    <content type="html"><![CDATA[<h1 id="文件上传函数"><a href="#文件上传函数" class="headerlink" title="文件上传函数"></a>文件上传函数</h1><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Multipartfile</span><br><span class="hljs-attribute">ServletFileUpload</span><br></code></pre></td></tr></table></figure><h1 id="文件读取与下载函数"><a href="#文件读取与下载函数" class="headerlink" title="文件读取与下载函数"></a>文件读取与下载函数</h1><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino">Files.read<br>Files.readString<br>FileReader<br>BufferedReader<br>Scanner<br>RandomAccessFile<br>readFileToString<br><br></code></pre></td></tr></table></figure><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">Runtime</span>.getRuntime<br>ProcessBuilder<br>UNIXProcess或ProcessImpl<br></code></pre></td></tr></table></figure><h1 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">ObjectOutputStream类的writeObject<br>ObjectInputStream类的readObject<br></code></pre></td></tr></table></figure><p>优秀Java代码审计文章系列</p><p>1、<a href="https://www.secpulse.com/archives/193771.html">红队-java代码审计生命周期</a></p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
